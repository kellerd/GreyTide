'use strict';
module App {
    export class MetadataHelper {
        public fillMetadataStore(store) {

            // Metadata-Helper instance configured with default namespace and key generator for this model
            var helper = new breeze.config.MetadataHelper('CC.Model', breeze.AutoGeneratedKeyType.Identity);
            // DataTypes
            var DT = breeze.DataType;
            var BOOL = DT.Boolean;
            var DATE = DT.DateTime;
            var ID = DT.Int32;
            var GUID = DT.Guid;
            var STRING = DT.String;

            // type order is irrelevant
            addModel();
            // addType - make it easy to add the type to the store using the helper
            function addType(type) {
                helper.addTypeToStore(store, type);
            };

            function addModel() {
                addType({
                    name: 'Model',
                    dataProperties: {
                        UserToken: { type: GUID, required: true },
                        Id: { type: GUID, required: true },
                        Name: { type: STRING, required: true },
                        CurrentState: { type: STRING },
                        CurrentDate: { type: DATE },
                        Faction: { type: STRING },
                        Points: { type: ID }, 
                        ParentId: { type: GUID }
                    },
                    navigationProperties :{ 
                        Items: { type: 'Model', hasMany: true },
                        States: { type: 'ModelState', hasMany: true },
                        Parent: { type: 'Model', hasMany: false }
                    }

                });
            }

            //function addPerson() {
            //    addType({
            //        name: 'Person',
            //        dataProperties: {
            //            id: { type: ID },
            //            firstName: { max: 50, required: true },
            //            lastName: { max: 50, required: true },
            //            // could add validators here; let model.validation add them
            //            email: { max: 400 },
            //            blog: { max: 400 },
            //            twitter: { max: 400 },
            //            gender: { max: 1 },
            //            imageSource: { max: 400 },

            //            // could let Breeze add unmapped but we do so to lock in the Boolean data type
            //            isPartial: { type: BOOL, required: true, isUnmapped: true },
            //            isSpeaker: { type: BOOL, required: true, isUnmapped: true }
            //        },

            //        navigationProperties: {
            //            speakerSessions: { type: 'Session', hasMany: true }
            //        }
            //    });
            //}

            //function addSession() {
            //    addType({
            //        name: 'Session',
            //        dataProperties: {
            //            id: { type: ID },
            //            title: { max: 50, required: true },
            //            code: { max: 10 },
            //            description: { max: 4000 },
            //            level: { max: 30 },
            //            tags: { max: 4000 },

            //            roomId: { type: ID, required: true },
            //            speakerId: { type: ID, required: true },
            //            timeSlotId: { type: ID, required: true },
            //            trackId: { type: ID, required: true },

            //            isPartial: { type: BOOL, required: true, isUnmapped: true }
            //        },

            //        // Let model.validation add the requireReferenceEntity validators
            //        navigationProperties: {
            //            room: 'Room',
            //            speaker: 'Person',
            //            timeSlot: 'TimeSlot',
            //            track: 'Track'
            //        }

            //    });
            //}

            //function addRoom() {
            //    addType({
            //        name: 'Room',
            //        dataProperties: {
            //            id: { type: ID },
            //            name: { max: 50, required: true }
            //        }
            //    });
            //}

            //function addTimeSlot() {
            //    addType({
            //        name: 'TimeSlot',
            //        dataProperties: {
            //            id: { type: ID },
            //            start: { type: DATE, required: true },
            //            isSessionSlot: { type: BOOL, required: true },
            //            duration: { type: ID, required: true }
            //        }
            //    });
            //}

            //function addTrack() {
            //    addType({
            //        name: 'Track',
            //        dataProperties: {
            //            id: { type: ID },
            //            name: { max: 50, required: true }
            //        }
            //    });
            //}
        }
    }
} 